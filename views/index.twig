<!DOCTYPE html>
<html lang="fr">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Test</title>
        <style>
            #canvas{
                transform: scale(20);
                transform-origin: top left;
                border: 1px solid black;
                margin: 10px
            }
        </style>
        <!-- Import TensorFlow.js -->
        <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.0.0/dist/tf.min.js">
        </script>
        <!-- Import tfjs-vis -->
        <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-vis@1.0.2/dist/tfjs-vis.umd.min.js">
        </script>

    </head>

    <body onload="init()">
        <div style="width: 100%; float: right;height:650px">
            <canvas id="canvas" width="28" height="28">

            </canvas>
        </div>
        <input type="button" value="save" id="btn" onclick="save()" >
        <input type="button" value="clear" id="clr" onclick="erase()" >

        <script>
            var canvas, ctx, flag = false,
                prevX = 0,
                currX = 0,
                prevY = 0,
                currY = 0,
                dot_flag = false;

            var x = "black",
                y = 2;

            function init() {
                canvas = document.getElementById('canvas');
                ctx = canvas.getContext("2d");
                w = canvas.width;
                h = canvas.height;

                canvas.addEventListener("mousemove", function (e) {
                    findxy('move', e)
                }, false);
                canvas.addEventListener("mousedown", function (e) {
                    findxy('down', e)
                }, false);
                canvas.addEventListener("mouseup", function (e) {
                    findxy('up', e)
                }, false);
                canvas.addEventListener("mouseout", function (e) {
                    findxy('out', e)
                }, false);
            }

            function draw() {
                ctx.beginPath();
                ctx.moveTo(prevX/20, prevY/20);
                ctx.lineTo(currX/20, currY/20);
                ctx.strokeStyle = x;
                ctx.lineWidth = y;
                ctx.stroke();
                ctx.closePath();
            }

            function erase() {
                var m = confirm("Want to clear");
                if (m) {
                    ctx.clearRect(0, 0, w, h);
                }
            }

            function save() {
                document.getElementById("canvas").style.border = "2px solid";
                var dataURL = canvas.toDataURL();
                document.getElementById("canvas").src = dataURL;
                document.getElementById("canvas").style.display = "inline";
            }

            function findxy(res, e) {
                if (res == 'down') {
                    prevX = currX;
                    prevY = currY;
                    currX = e.clientX - canvas.offsetLeft;
                    currY = e.clientY - canvas.offsetTop;

                    flag = true;
                    dot_flag = true;
                    if (dot_flag) {
                        ctx.beginPath();
                        ctx.fillStyle = x;
                        ctx.fillRect(currX, currY, 2, 2);
                        ctx.closePath();
                        dot_flag = false;
                    }
                }
                if (res == 'up' || res == "out") {
                    flag = false;
                }
                if (res == 'move') {
                    if (flag) {
                        prevX = currX;
                        prevY = currY;
                        currX = e.clientX - canvas.offsetLeft;
                        currY = e.clientY - canvas.offsetTop;
                        draw();
                    }
                }
            }
        </script>
    </body>
</html>
